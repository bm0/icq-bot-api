// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package icqbotapi

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson66c1e240DecodeGithubComBm0IcqBotApi(in *jlexer.Lexer, out *StatusResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ok":
			out.Ok = bool(in.Bool())
		case "description":
			(out.Description).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66c1e240EncodeGithubComBm0IcqBotApi(out *jwriter.Writer, in StatusResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ok\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Ok))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		(in.Description).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StatusResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66c1e240EncodeGithubComBm0IcqBotApi(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StatusResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66c1e240EncodeGithubComBm0IcqBotApi(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StatusResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66c1e240DecodeGithubComBm0IcqBotApi(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StatusResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66c1e240DecodeGithubComBm0IcqBotApi(l, v)
}
func easyjson66c1e240DecodeGithubComBm0IcqBotApi1(in *jlexer.Lexer, out *StatusMessageIDResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "msgId":
			out.MessageID = string(in.String())
		case "ok":
			out.Ok = bool(in.Bool())
		case "description":
			(out.Description).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66c1e240EncodeGithubComBm0IcqBotApi1(out *jwriter.Writer, in StatusMessageIDResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"msgId\":"
		out.RawString(prefix[1:])
		out.String(string(in.MessageID))
	}
	{
		const prefix string = ",\"ok\":"
		out.RawString(prefix)
		out.Bool(bool(in.Ok))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		(in.Description).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StatusMessageIDResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66c1e240EncodeGithubComBm0IcqBotApi1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StatusMessageIDResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66c1e240EncodeGithubComBm0IcqBotApi1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StatusMessageIDResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66c1e240DecodeGithubComBm0IcqBotApi1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StatusMessageIDResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66c1e240DecodeGithubComBm0IcqBotApi1(l, v)
}
func easyjson66c1e240DecodeGithubComBm0IcqBotApi2(in *jlexer.Lexer, out *SendNewFileResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fileId":
			out.FileID = string(in.String())
		case "msgId":
			out.MessageID = string(in.String())
		case "ok":
			out.Ok = bool(in.Bool())
		case "description":
			(out.Description).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66c1e240EncodeGithubComBm0IcqBotApi2(out *jwriter.Writer, in SendNewFileResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"fileId\":"
		out.RawString(prefix[1:])
		out.String(string(in.FileID))
	}
	{
		const prefix string = ",\"msgId\":"
		out.RawString(prefix)
		out.String(string(in.MessageID))
	}
	{
		const prefix string = ",\"ok\":"
		out.RawString(prefix)
		out.Bool(bool(in.Ok))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		(in.Description).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SendNewFileResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66c1e240EncodeGithubComBm0IcqBotApi2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SendNewFileResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66c1e240EncodeGithubComBm0IcqBotApi2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SendNewFileResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66c1e240DecodeGithubComBm0IcqBotApi2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SendNewFileResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66c1e240DecodeGithubComBm0IcqBotApi2(l, v)
}
func easyjson66c1e240DecodeGithubComBm0IcqBotApi3(in *jlexer.Lexer, out *EditMessageRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chatId":
			out.ChatID = string(in.String())
		case "msgId":
			out.MessageID = string(in.String())
		case "text":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66c1e240EncodeGithubComBm0IcqBotApi3(out *jwriter.Writer, in EditMessageRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"chatId\":"
		out.RawString(prefix[1:])
		out.String(string(in.ChatID))
	}
	{
		const prefix string = ",\"msgId\":"
		out.RawString(prefix)
		out.String(string(in.MessageID))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EditMessageRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66c1e240EncodeGithubComBm0IcqBotApi3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EditMessageRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66c1e240EncodeGithubComBm0IcqBotApi3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EditMessageRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66c1e240DecodeGithubComBm0IcqBotApi3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EditMessageRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66c1e240DecodeGithubComBm0IcqBotApi3(l, v)
}
func easyjson66c1e240DecodeGithubComBm0IcqBotApi4(in *jlexer.Lexer, out *DeleteMessageRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chatId":
			out.ChatID = string(in.String())
		case "msgId":
			out.MessageID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66c1e240EncodeGithubComBm0IcqBotApi4(out *jwriter.Writer, in DeleteMessageRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"chatId\":"
		out.RawString(prefix[1:])
		out.String(string(in.ChatID))
	}
	{
		const prefix string = ",\"msgId\":"
		out.RawString(prefix)
		out.String(string(in.MessageID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DeleteMessageRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66c1e240EncodeGithubComBm0IcqBotApi4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DeleteMessageRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66c1e240EncodeGithubComBm0IcqBotApi4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DeleteMessageRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66c1e240DecodeGithubComBm0IcqBotApi4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DeleteMessageRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66c1e240DecodeGithubComBm0IcqBotApi4(l, v)
}
