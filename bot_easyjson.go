// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package icqbotapi

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonF9b49d5DecodeGithubComBm0IcqBotApi(in *jlexer.Lexer, out *GetSelfResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userId":
			out.UserID = string(in.String())
		case "nick":
			out.Nick = string(in.String())
		case "firstName":
			out.FirstName = string(in.String())
		case "about":
			out.About = string(in.String())
		case "photo":
			if in.IsNull() {
				in.Skip()
				out.Photo = nil
			} else {
				in.Delim('[')
				if out.Photo == nil {
					if !in.IsDelim(']') {
						out.Photo = make([]struct {
							URL string `json:"url"`
						}, 0, 4)
					} else {
						out.Photo = []struct {
							URL string `json:"url"`
						}{}
					}
				} else {
					out.Photo = (out.Photo)[:0]
				}
				for !in.IsDelim(']') {
					var v1 struct {
						URL string `json:"url"`
					}
					easyjsonF9b49d5Decode(in, &v1)
					out.Photo = append(out.Photo, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ok":
			out.Ok = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF9b49d5EncodeGithubComBm0IcqBotApi(out *jwriter.Writer, in GetSelfResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userId\":"
		out.RawString(prefix[1:])
		out.String(string(in.UserID))
	}
	{
		const prefix string = ",\"nick\":"
		out.RawString(prefix)
		out.String(string(in.Nick))
	}
	{
		const prefix string = ",\"firstName\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"about\":"
		out.RawString(prefix)
		out.String(string(in.About))
	}
	{
		const prefix string = ",\"photo\":"
		out.RawString(prefix)
		if in.Photo == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Photo {
				if v2 > 0 {
					out.RawByte(',')
				}
				easyjsonF9b49d5Encode(out, v3)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ok\":"
		out.RawString(prefix)
		out.Bool(bool(in.Ok))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetSelfResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF9b49d5EncodeGithubComBm0IcqBotApi(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetSelfResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF9b49d5EncodeGithubComBm0IcqBotApi(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetSelfResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF9b49d5DecodeGithubComBm0IcqBotApi(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetSelfResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF9b49d5DecodeGithubComBm0IcqBotApi(l, v)
}
func easyjsonF9b49d5Decode(in *jlexer.Lexer, out *struct {
	URL string `json:"url"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.URL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF9b49d5Encode(out *jwriter.Writer, in struct {
	URL string `json:"url"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		out.String(string(in.URL))
	}
	out.RawByte('}')
}
