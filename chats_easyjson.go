// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package icqbotapi

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	url "net/url"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson24fe7897DecodeGithubComBm0IcqBotApi(in *jlexer.Lexer, out *GetAdminsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Admins":
			if in.IsNull() {
				in.Skip()
				out.Admins = nil
			} else {
				in.Delim('[')
				if out.Admins == nil {
					if !in.IsDelim(']') {
						out.Admins = make([]Admin, 0, 2)
					} else {
						out.Admins = []Admin{}
					}
				} else {
					out.Admins = (out.Admins)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Admin
					(v1).UnmarshalEasyJSON(in)
					out.Admins = append(out.Admins, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ok":
			out.Ok = bool(in.Bool())
		case "description":
			(out.Description).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson24fe7897EncodeGithubComBm0IcqBotApi(out *jwriter.Writer, in GetAdminsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Admins\":"
		out.RawString(prefix[1:])
		if in.Admins == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Admins {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ok\":"
		out.RawString(prefix)
		out.Bool(bool(in.Ok))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		(in.Description).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetAdminsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson24fe7897EncodeGithubComBm0IcqBotApi(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetAdminsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson24fe7897EncodeGithubComBm0IcqBotApi(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetAdminsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson24fe7897DecodeGithubComBm0IcqBotApi(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetAdminsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson24fe7897DecodeGithubComBm0IcqBotApi(l, v)
}
func easyjson24fe7897DecodeGithubComBm0IcqBotApi1(in *jlexer.Lexer, out *ChatInfoResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "inviteLink":
			easyjson24fe7897DecodeNetUrl(in, &out.InviteLink)
		case "public":
			out.IsPublic = bool(in.Bool())
		case "title":
			out.Title = string(in.String())
		case "group":
			out.Group = string(in.String())
		case "ok":
			out.Ok = bool(in.Bool())
		case "description":
			(out.Description).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson24fe7897EncodeGithubComBm0IcqBotApi1(out *jwriter.Writer, in ChatInfoResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"inviteLink\":"
		out.RawString(prefix[1:])
		easyjson24fe7897EncodeNetUrl(out, in.InviteLink)
	}
	{
		const prefix string = ",\"public\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsPublic))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"group\":"
		out.RawString(prefix)
		out.String(string(in.Group))
	}
	{
		const prefix string = ",\"ok\":"
		out.RawString(prefix)
		out.Bool(bool(in.Ok))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		(in.Description).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChatInfoResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson24fe7897EncodeGithubComBm0IcqBotApi1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChatInfoResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson24fe7897EncodeGithubComBm0IcqBotApi1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChatInfoResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson24fe7897DecodeGithubComBm0IcqBotApi1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChatInfoResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson24fe7897DecodeGithubComBm0IcqBotApi1(l, v)
}
func easyjson24fe7897DecodeNetUrl(in *jlexer.Lexer, out *url.URL) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Scheme":
			out.Scheme = string(in.String())
		case "Opaque":
			out.Opaque = string(in.String())
		case "User":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(url.Userinfo)
				}
				easyjson24fe7897DecodeNetUrl1(in, out.User)
			}
		case "Host":
			out.Host = string(in.String())
		case "Path":
			out.Path = string(in.String())
		case "RawPath":
			out.RawPath = string(in.String())
		case "ForceQuery":
			out.ForceQuery = bool(in.Bool())
		case "RawQuery":
			out.RawQuery = string(in.String())
		case "Fragment":
			out.Fragment = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson24fe7897EncodeNetUrl(out *jwriter.Writer, in url.URL) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Scheme\":"
		out.RawString(prefix[1:])
		out.String(string(in.Scheme))
	}
	{
		const prefix string = ",\"Opaque\":"
		out.RawString(prefix)
		out.String(string(in.Opaque))
	}
	{
		const prefix string = ",\"User\":"
		out.RawString(prefix)
		if in.User == nil {
			out.RawString("null")
		} else {
			easyjson24fe7897EncodeNetUrl1(out, *in.User)
		}
	}
	{
		const prefix string = ",\"Host\":"
		out.RawString(prefix)
		out.String(string(in.Host))
	}
	{
		const prefix string = ",\"Path\":"
		out.RawString(prefix)
		out.String(string(in.Path))
	}
	{
		const prefix string = ",\"RawPath\":"
		out.RawString(prefix)
		out.String(string(in.RawPath))
	}
	{
		const prefix string = ",\"ForceQuery\":"
		out.RawString(prefix)
		out.Bool(bool(in.ForceQuery))
	}
	{
		const prefix string = ",\"RawQuery\":"
		out.RawString(prefix)
		out.String(string(in.RawQuery))
	}
	{
		const prefix string = ",\"Fragment\":"
		out.RawString(prefix)
		out.String(string(in.Fragment))
	}
	out.RawByte('}')
}
func easyjson24fe7897DecodeNetUrl1(in *jlexer.Lexer, out *url.Userinfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson24fe7897EncodeNetUrl1(out *jwriter.Writer, in url.Userinfo) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}
func easyjson24fe7897DecodeGithubComBm0IcqBotApi2(in *jlexer.Lexer, out *ChatActionsRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ChatID":
			out.ChatID = ChatID(in.String())
		case "Actions":
			if in.IsNull() {
				in.Skip()
				out.Actions = nil
			} else {
				in.Delim('[')
				if out.Actions == nil {
					if !in.IsDelim(']') {
						out.Actions = make([]ChatAction, 0, 4)
					} else {
						out.Actions = []ChatAction{}
					}
				} else {
					out.Actions = (out.Actions)[:0]
				}
				for !in.IsDelim(']') {
					var v4 ChatAction
					v4 = ChatAction(in.String())
					out.Actions = append(out.Actions, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson24fe7897EncodeGithubComBm0IcqBotApi2(out *jwriter.Writer, in ChatActionsRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ChatID\":"
		out.RawString(prefix[1:])
		out.String(string(in.ChatID))
	}
	{
		const prefix string = ",\"Actions\":"
		out.RawString(prefix)
		if in.Actions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Actions {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChatActionsRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson24fe7897EncodeGithubComBm0IcqBotApi2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChatActionsRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson24fe7897EncodeGithubComBm0IcqBotApi2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChatActionsRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson24fe7897DecodeGithubComBm0IcqBotApi2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChatActionsRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson24fe7897DecodeGithubComBm0IcqBotApi2(l, v)
}
func easyjson24fe7897DecodeGithubComBm0IcqBotApi3(in *jlexer.Lexer, out *Admin) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "UserID":
			out.UserID = string(in.String())
		case "IsCreator":
			out.IsCreator = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson24fe7897EncodeGithubComBm0IcqBotApi3(out *jwriter.Writer, in Admin) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"UserID\":"
		out.RawString(prefix[1:])
		out.String(string(in.UserID))
	}
	{
		const prefix string = ",\"IsCreator\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsCreator))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Admin) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson24fe7897EncodeGithubComBm0IcqBotApi3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Admin) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson24fe7897EncodeGithubComBm0IcqBotApi3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Admin) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson24fe7897DecodeGithubComBm0IcqBotApi3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Admin) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson24fe7897DecodeGithubComBm0IcqBotApi3(l, v)
}
