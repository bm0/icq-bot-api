// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package event

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent(in *jlexer.Lexer, out *VoicePayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fileId":
			out.FileID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent(out *jwriter.Writer, in VoicePayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"fileId\":"
		out.RawString(prefix[1:])
		out.String(string(in.FileID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VoicePayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VoicePayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VoicePayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VoicePayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent(l, v)
}
func easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent1(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userId":
			out.UserID = string(in.String())
		case "firstName":
			out.FirstName = string(in.String())
		case "lastName":
			out.LastName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent1(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userId\":"
		out.RawString(prefix[1:])
		out.String(string(in.UserID))
	}
	{
		const prefix string = ",\"firstName\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"lastName\":"
		out.RawString(prefix)
		out.String(string(in.LastName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent1(l, v)
}
func easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent2(in *jlexer.Lexer, out *StickerPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fileId":
			out.FileID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent2(out *jwriter.Writer, in StickerPayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"fileId\":"
		out.RawString(prefix[1:])
		out.String(string(in.FileID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StickerPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StickerPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StickerPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StickerPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent2(l, v)
}
func easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent3(in *jlexer.Lexer, out *ReplyPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent4(in, &out.Message)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent3(out *jwriter.Writer, in ReplyPayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix[1:])
		easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent4(out, in.Message)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReplyPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReplyPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReplyPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReplyPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent3(l, v)
}
func easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent4(in *jlexer.Lexer, out *Message) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "msgId":
			out.MessageID = string(in.String())
		case "from":
			(out.From).UnmarshalEasyJSON(in)
		case "text":
			out.Text = string(in.String())
		case "timestamp":
			out.Timestamp = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent4(out *jwriter.Writer, in Message) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"msgId\":"
		out.RawString(prefix[1:])
		out.String(string(in.MessageID))
	}
	{
		const prefix string = ",\"from\":"
		out.RawString(prefix)
		(in.From).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Timestamp))
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent5(in *jlexer.Lexer, out *NewMessagePayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "msgId":
			out.MessageID = string(in.String())
		case "chat":
			(out.Chat).UnmarshalEasyJSON(in)
		case "from":
			(out.From).UnmarshalEasyJSON(in)
		case "timestamp":
			out.Timestamp = uint64(in.Uint64())
		case "text":
			out.Text = string(in.String())
		case "parts":
			if in.IsNull() {
				in.Skip()
				out.Parts = nil
			} else {
				in.Delim('[')
				if out.Parts == nil {
					if !in.IsDelim(']') {
						out.Parts = make([]MessagePart, 0, 1)
					} else {
						out.Parts = []MessagePart{}
					}
				} else {
					out.Parts = (out.Parts)[:0]
				}
				for !in.IsDelim(']') {
					var v1 MessagePart
					(v1).UnmarshalEasyJSON(in)
					out.Parts = append(out.Parts, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent5(out *jwriter.Writer, in NewMessagePayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"msgId\":"
		out.RawString(prefix[1:])
		out.String(string(in.MessageID))
	}
	{
		const prefix string = ",\"chat\":"
		out.RawString(prefix)
		(in.Chat).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"from\":"
		out.RawString(prefix)
		(in.From).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Timestamp))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"parts\":"
		out.RawString(prefix)
		if in.Parts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Parts {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NewMessagePayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NewMessagePayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NewMessagePayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NewMessagePayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent5(l, v)
}
func easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent6(in *jlexer.Lexer, out *NewChatMembersPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "msgId":
			out.MessageID = string(in.String())
		case "chat":
			(out.Chat).UnmarshalEasyJSON(in)
		case "timestamp":
			out.Timestamp = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent6(out *jwriter.Writer, in NewChatMembersPayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"msgId\":"
		out.RawString(prefix[1:])
		out.String(string(in.MessageID))
	}
	{
		const prefix string = ",\"chat\":"
		out.RawString(prefix)
		(in.Chat).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Timestamp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NewChatMembersPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NewChatMembersPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NewChatMembersPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NewChatMembersPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent6(l, v)
}
func easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent7(in *jlexer.Lexer, out *MessageUnpinPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "msgId":
			out.MessageID = string(in.String())
		case "chat":
			(out.Chat).UnmarshalEasyJSON(in)
		case "timestamp":
			out.Timestamp = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent7(out *jwriter.Writer, in MessageUnpinPayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"msgId\":"
		out.RawString(prefix[1:])
		out.String(string(in.MessageID))
	}
	{
		const prefix string = ",\"chat\":"
		out.RawString(prefix)
		(in.Chat).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Timestamp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MessageUnpinPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MessageUnpinPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MessageUnpinPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MessageUnpinPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent7(l, v)
}
func easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent8(in *jlexer.Lexer, out *MessagePinPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "msgId":
			out.MessageID = string(in.String())
		case "chat":
			(out.Chat).UnmarshalEasyJSON(in)
		case "from":
			(out.From).UnmarshalEasyJSON(in)
		case "timestamp":
			out.Timestamp = uint64(in.Uint64())
		case "text":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent8(out *jwriter.Writer, in MessagePinPayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"msgId\":"
		out.RawString(prefix[1:])
		out.String(string(in.MessageID))
	}
	{
		const prefix string = ",\"chat\":"
		out.RawString(prefix)
		(in.Chat).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"from\":"
		out.RawString(prefix)
		(in.From).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Timestamp))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MessagePinPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MessagePinPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MessagePinPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MessagePinPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent8(l, v)
}
func easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent9(in *jlexer.Lexer, out *MessageEditPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "msgId":
			out.MessageID = string(in.String())
		case "chat":
			(out.Chat).UnmarshalEasyJSON(in)
		case "from":
			(out.From).UnmarshalEasyJSON(in)
		case "timestamp":
			out.Timestamp = uint64(in.Uint64())
		case "text":
			out.Text = string(in.String())
		case "editedTimestamp":
			out.EditedAt = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent9(out *jwriter.Writer, in MessageEditPayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"msgId\":"
		out.RawString(prefix[1:])
		out.String(string(in.MessageID))
	}
	{
		const prefix string = ",\"chat\":"
		out.RawString(prefix)
		(in.Chat).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"from\":"
		out.RawString(prefix)
		(in.From).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Timestamp))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"editedTimestamp\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.EditedAt))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MessageEditPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MessageEditPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MessageEditPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MessageEditPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent9(l, v)
}
func easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent10(in *jlexer.Lexer, out *MessageDeletePayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "msgId":
			out.MessageID = string(in.String())
		case "chat":
			(out.Chat).UnmarshalEasyJSON(in)
		case "timestamp":
			out.Timestamp = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent10(out *jwriter.Writer, in MessageDeletePayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"msgId\":"
		out.RawString(prefix[1:])
		out.String(string(in.MessageID))
	}
	{
		const prefix string = ",\"chat\":"
		out.RawString(prefix)
		(in.Chat).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Timestamp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MessageDeletePayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MessageDeletePayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MessageDeletePayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MessageDeletePayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent10(l, v)
}
func easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent11(in *jlexer.Lexer, out *MentionPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userId":
			out.UserID = string(in.String())
		case "firstName":
			out.FirstName = string(in.String())
		case "lastName":
			out.LastName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent11(out *jwriter.Writer, in MentionPayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userId\":"
		out.RawString(prefix[1:])
		out.String(string(in.UserID))
	}
	{
		const prefix string = ",\"firstName\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"lastName\":"
		out.RawString(prefix)
		out.String(string(in.LastName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MentionPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MentionPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MentionPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MentionPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent11(l, v)
}
func easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent12(in *jlexer.Lexer, out *LeftChatMembersPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chat":
			(out.Chat).UnmarshalEasyJSON(in)
		case "leftMembers":
			if in.IsNull() {
				in.Skip()
				out.LeftMembers = nil
			} else {
				in.Delim('[')
				if out.LeftMembers == nil {
					if !in.IsDelim(']') {
						out.LeftMembers = make([]User, 0, 1)
					} else {
						out.LeftMembers = []User{}
					}
				} else {
					out.LeftMembers = (out.LeftMembers)[:0]
				}
				for !in.IsDelim(']') {
					var v4 User
					(v4).UnmarshalEasyJSON(in)
					out.LeftMembers = append(out.LeftMembers, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "removedBy":
			(out.RemovedBy).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent12(out *jwriter.Writer, in LeftChatMembersPayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"chat\":"
		out.RawString(prefix[1:])
		(in.Chat).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"leftMembers\":"
		out.RawString(prefix)
		if in.LeftMembers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.LeftMembers {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"removedBy\":"
		out.RawString(prefix)
		(in.RemovedBy).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LeftChatMembersPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LeftChatMembersPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LeftChatMembersPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LeftChatMembersPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent12(l, v)
}
func easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent13(in *jlexer.Lexer, out *ForwardPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent4(in, &out.Message)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent13(out *jwriter.Writer, in ForwardPayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix[1:])
		easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent4(out, in.Message)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ForwardPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ForwardPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ForwardPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ForwardPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent13(l, v)
}
func easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent14(in *jlexer.Lexer, out *FilePayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fileId":
			out.FileID = string(in.String())
		case "type":
			out.Type = FileType(in.String())
		case "caption":
			out.Caption = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent14(out *jwriter.Writer, in FilePayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"fileId\":"
		out.RawString(prefix[1:])
		out.String(string(in.FileID))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"caption\":"
		out.RawString(prefix)
		out.String(string(in.Caption))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FilePayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FilePayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FilePayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FilePayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent14(l, v)
}
func easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent15(in *jlexer.Lexer, out *File) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fileId":
			out.FileID = string(in.String())
		case "type":
			out.Type = FileType(in.String())
		case "caption":
			out.Caption = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent15(out *jwriter.Writer, in File) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"fileId\":"
		out.RawString(prefix[1:])
		out.String(string(in.FileID))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"caption\":"
		out.RawString(prefix)
		out.String(string(in.Caption))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v File) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v File) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *File) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *File) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent15(l, v)
}
func easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent16(in *jlexer.Lexer, out *Event) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "eventId":
			out.EventID = int(in.Int())
		case "type":
			out.Type = Kind(in.String())
		case "payload":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Payload).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent16(out *jwriter.Writer, in Event) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"eventId\":"
		out.RawString(prefix[1:])
		out.Int(int(in.EventID))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"payload\":"
		out.RawString(prefix)
		out.Raw((in.Payload).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Event) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Event) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Event) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Event) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent16(l, v)
}
func easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent17(in *jlexer.Lexer, out *Chat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chatId":
			out.ChatID = string(in.String())
		case "type":
			out.Type = ChatKind(in.String())
		case "title":
			out.Title = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent17(out *jwriter.Writer, in Chat) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"chatId\":"
		out.RawString(prefix[1:])
		out.String(string(in.ChatID))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Chat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Chat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF642ad3eEncodeGithubComBm0IcqBotApiEvent17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Chat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Chat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF642ad3eDecodeGithubComBm0IcqBotApiEvent17(l, v)
}
